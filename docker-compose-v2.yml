version: '3.1'

services:
  postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: your-username
      POSTGRES_PASSWORD: your-password
      POSTGRES_DB: your-database-name
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  esj-backend:
    build:
      context: ./esj-backend
      dockerfile: dockerfile
    container_name: esj-backend
    ports:
      - "8443:8443"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/your-database-name
      SPRING_DATASOURCE_USERNAME: your-username
      SPRING_DATASOURCE_PASSWORD: your-password
      IP_ADDRESS_BACKEND: https://${IP_ADDRESS}:8443
      IP_ADDRESS_FRONTEND: https://${IP_ADDRESS}
    depends_on:
      - postgres

  esj-frontend:
    build:
      context: ./esj-frontend
      dockerfile: Dockerfile
    container_name: esj-frontend
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_SPRINGBOOT_API_URL: https://${IP_ADDRESS}:8443
      NEXT_PUBLIC_SPRING_SOCKET: wss://${IP_ADDRESS}:8443
      NEXT_PUBLIC_FLASK_API_URL: http://${IP_ADDRESS}:5000
      NEXT_PUBLIC_EXPRESS_API_URL: http://${IP_ADDRESS}:7777
    depends_on:
      - esj-backend
  
  nginx:
    build: ./nginx
    container_name: nginx-proxy
    depends_on:
      - esj-frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/nginx/ssl

  express-server:
    build:
      context: ./esj-express-server
      dockerfile: dockerfile
    container_name: esj-express-server
    volumes:
      - .:/usr/src/app
    environment:
      IP_ADDRESS_FRONTEND: https://${IP_ADDRESS}
      URL: http://${IP_ADDRESS}:7777
      API_KEY: 
    ports:
      - "7777:7777"
    depends_on:
      - nginx

  zoo11:
    image: confluentinc/cp-zookeeper:latest
    hostname: zoo11
    container_name: zoo11
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo11:2888:3888

  kafka11:
    image: confluentinc/cp-kafka:latest
    hostname: kafka11
    container_name: kafka11
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka11:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo11:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo11

volumes:
  postgres_data:
